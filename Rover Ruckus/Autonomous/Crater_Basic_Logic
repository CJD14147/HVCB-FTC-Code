package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;

import android.graphics.Color;

@Autonomous(name="Basic Crater Logic", group="Auto")
public class Crater_Basic_Logic extends LinearOpMode {
 
     /* Declare OpMode members. */
     RoverHardware robot = new RoverHardware();
     private ElapsedTime runtime = new ElapsedTime();
 
     @Override
     public void runOpMode() {
      
     /*
     * Initialize the drive system variables.
     * The init() method of the hardware class does all the work here
     */
     robot.init(hardwareMap);
     
     // Wait for the game to start (driver presses PLAY)
     waitForStart();
     
     //// hsvValues is an array that will hold the hue, saturation, and value information.
     float hsvValues[] = {0F, 0F, 0F};
      
     //// values is a reference to the hsvValues array.
     final float values[] = hsvValues;
      
     //// sometimes it helps to multiply the raw RGB values with a scale factor
     //// to amplify/attentuate the measured values.
     final double SCALE_FACTOR = 255;
     
     Color.RGBToHSV((int) (robot.sensorColor.red()), (int) (robot.sensorColor.green()),
                    (int) (robot.sensorColor.blue()), hsvValues);
      
     ////////////////////////////////////////////////////////////////
     ///// Begin routine hanging from lander facing CRATER //////
     ////////////////////////////////////////////////////////////////
      
     //// STEP 1: Move lift UP to lower robot from hanging position to playing field 
     //// Negative lift power = extending
     robot.lift.setPower(-1);
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 3.3)){
     telemetry.addData("Unfolding:", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.lift.setPower(0);
     
     sleep(1000);
      
     ////  STEP 2: Move right to detach the hook from the lander ring
     robot.right();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.16)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }robot.stop();
     sleep(1000);
      
     
     //// STEP 3: Move backward to square the robot against the lander
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.03)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }robot.stop();
     sleep(1000);
      
     //// STEP 4: Move forward away from lander toward mineral samples
     robot.forward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.61)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
      robot.stop();
     //// STEP 4A: Reverse move (backward) to stop the forward movement above
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     sleep (1000);
     
     ////STEP 5: Move right to position robot at mineral sample 1
     robot.right();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.52)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     ////STEP 5A: Reverse move (left) to stop the movement above
     robot.left();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.01)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     sleep (1000);
      
     ///////////////////////////////////////////////
     ///// Robot is now at mineral sample 1 //////
     ///////////////////////////////////////////////
     
     ///// Servo arm movement/////////
     robot.sensorArm.setPosition(0.85);
     
     ///// Forward to adjust for drift /////
     robot.forward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.06)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
      robot.stop();
     //// STEP 4A: Reverse move (backward) to stop the forward movement above
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
      
      
     robot.spinLeft();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.07)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
     robot.spinRight();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.01)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
     
     
     sleep(1500);
     
     // conversion from RGB to HSV
     Color.RGBToHSV((int) (robot.sensorColor.red()), (int) (robot.sensorColor.green()),
                    (int) (robot.sensorColor.blue()), hsvValues);
    
    // begining of sampling logic
     while(opModeIsActive() && (runtime.seconds() <= 2.5)){
         telemetry.addData("Hue", hsvValues[0]);
         telemetry.update();
     }
    
     if (hsvValues[0] < 60){
      
     
      
         robot.forward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.36)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.backward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.44)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.forward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
          robot.left();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 1.34)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.right();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.sensorArm.setPosition(1);
         
     }else{
         ////STEP 6: Move left from mineral sample 1 to mineral sample 2
         robot.left();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.72)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
         ////STEP 6A: Reverse move (right) to stop the movement above
         robot.right();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
         
                     
        ///////////////////////////////////////////////
        ///// Robot is now at sample mineral 2 //////
        ///////////////////////////////////////////////
         sleep (1000);
         
         
          Color.RGBToHSV((int) (robot.sensorColor.red()), (int) (robot.sensorColor.green()),
                    (int) (robot.sensorColor.blue()), hsvValues);
         
         while(opModeIsActive() && (runtime.seconds() <= 2.5)){
         telemetry.addData("Hue", hsvValues[0]);
         telemetry.update();
         }
         
         if (hsvValues[0] < 60){
             robot.forward();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.32)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
             robot.backward();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.40)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
             robot.forward();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.02)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
              robot.left();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.65)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
             robot.right();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.02)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
             robot.sensorArm.setPosition(0.365);
             
         }else{
          
            robot.sensorArm.setPosition(0.365);
      
            //// STEP 7: Move left from mineral sample 2 to mineral sample 3
            robot.left();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.65)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            }
            robot.stop();
            //// STEP 7A: Reverse move (right) to stop the movement above
            robot.right();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.02)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            }
            robot.stop();
            sleep (500);
            
                        
            ///////////////////////////////////////////////
            ///// Robot is now at sample mineral 3 //////
            ///////////////////////////////////////////////
            
            robot.forward();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.32)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            }
            robot.stop();
             
            robot.backward();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.40)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            } 
            robot.stop();
            
            robot.forward();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.02)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            } 
            robot.stop();
         }
         
     }   

     /////////////////////////////////////////////
     ///// THIS IS “START DEPOT MOVE POSITION”(blue box) ///////////////////
     ///// Robot is now done sampling and at sample mineral 3////
     ///// Begin movement toward depot to drop marker////
     /////////////////////////////////////////////
      
     //// STEP 8: Move left toward depot wall at ~45 degrees to wall
     robot.left();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 1.64)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     ////STEP 8A:  Reverse move (right) to stop the movement above
     robot.right();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
      
     //// STEP 9: Spin right to square the robot to the wall before depot move
     robot.spinRight();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.46)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     ////STEP 9A:  Reverse move (spin left) to stop the movement above
     robot.spinLeft();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
     ////STEP 9B:  move left towards wall
     robot.left();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.18)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
      
     ////STEP 10: Move backward toward depot to drop the marker
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 1.54)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     ////STEP 10A: Reverse move (forward) to stop movement above
     robot.forward();
     robot.stop();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
     
     
      
     /////////////////////////////////////////////
     //// Robot is now in depot ////
     /////////////////////////////////////////////
      
     //// STEP 11: Spin Right to make sure the marker drops in the center of the depot
     robot.spinRight();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <=0.32)){
     telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     //// STEP 11A:  Reverse move (Spin left) to stop movement above
     robot.spinLeft();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <=0.01)){
     telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
      
     //////////////////////////////////////////////
     //// Drop the marker ////
     //////////////////////////////////////////////
      
     //// STEP 12: Rotate marker servo to drop servo
     robot.marker.setPosition(0);
      
     ////STEP 13 Sleep robot for enough time to drop marker SUPER IMPORTANT SLEEP!!!!!!!!!
     sleep (2000);
     
     // // 2 or 3 degree turn before move back to crater to avoid cratrer minerals
     // robot.spinLeft();
     // runtime.reset();
     // while(opModeIsActive() && (runtime.seconds() <=0.03)){
     // telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     // }
     // robot.stop();
     
      
     //// STEP 14: Spin left to aim the robot back at the crater before moving there (spin above +.01)
     robot.spinLeft();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <=0.30)){
     telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     //// STEP 14A:  Reverse move (Spin right) to stop movement above
     robot.spinRight();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <=0.01)){
     telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
     
     
      
     //// STEP 15: Move forward from depot toward crater
     robot.forward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <=2.38)){
     telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
      
     robot.marker.setPosition(0);
     robot.sensorArm.setPosition(1);
     
     sleep (2000);
     robot.stop();
      
     ////////////////////////////////////////////////////
     ///// Robot is now touching crater /////
     ///// End autonomous /////
     ////////////////////////////////////////////////////
      
      
    
      }
     }
