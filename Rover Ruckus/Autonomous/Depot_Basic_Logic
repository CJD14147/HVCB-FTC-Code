package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;
import android.graphics.Color;


@Autonomous(name="Depot Basic Logic", group="Auto")
public class Depot_Basic_Logic extends LinearOpMode {

    /* Declare OpMode members. */
   RoverHardware robot           = new RoverHardware();
   private ElapsedTime     runtime = new ElapsedTime();

    @Override
    public void runOpMode() {

        /*
         * Initialize the drive system variables.
         * The init() method of the hardware class does all the work here
         */
        robot.init(hardwareMap);

        // Send telemetry message to signify robot waiting;
       

        // Wait for the game to start (driver presses PLAY)
        
        while (!opModeIsActive() && !isStopRequested()); {
         telemetry.addData ("Status", "Waiting for start command...");
         // telemetry.update();
        }

        //// hsvValues is an array that will hold the hue, saturation, and value information.
     float hsvValues[] = {0F, 0F, 0F};
      

     //// values is a reference to the hsvValues array.
     final float values[] = hsvValues;
      
     //// sometimes it helps to multiply the raw RGB values with a scale factor
     //// to amplify/attentuate the measured values.
     final double SCALE_FACTOR = 255;
     
     Color.RGBToHSV((int) (robot.sensorColor.red()), (int) (robot.sensorColor.green()),
                    (int) (robot.sensorColor.blue()), hsvValues);
      
     ////////////////////////////////////////////////////////////////
     ///// Begin routine hanging from lander facing CRATER //////
     ////////////////////////////////////////////////////////////////
      
     //// STEP 1: Move lift UP to lower robot from hanging position to playing field 
     //// Negative lift power = extending
     robot.lift.setPower(-1);
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 3.4)){
     telemetry.addData("Unfolding:", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.lift.setPower(0);
     
     sleep(1000);
      
     ////  STEP 2: Move right to detach the hook from the lander ring
     robot.right();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.19)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }robot.stop();
     sleep(1000);
      
     
     //// STEP 3: Move backward to square the robot against the lander
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.03)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }robot.stop();
     sleep(1000);
      
     //// STEP 4: Move forward away from lander toward mineral samples
     robot.forward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.57)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
      robot.stop();
     //// STEP 4A: Reverse move (backward) to stop the forward movement above
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     sleep (1000);
     
      
     ////STEP 5: Move right to position robot at mineral sample 1
     robot.right();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.59)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     ////STEP 5A: Reverse move (left) to stop the movement above
     robot.left();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.01)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     sleep (1000);
      
     ///////////////////////////////////////////////
     ///// Robot is now at mineral sample 1 //////
     ///////////////////////////////////////////////
     
     ///// STEP 6: Forward to adjust for drift /////
     robot.forward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.06)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
      robot.stop();
     //// STEP 6A: Reverse move (backward) to stop the forward movement above
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
     sleep(1500);
     
    // conversion from RGB to HSV
     Color.RGBToHSV((int) (robot.sensorColor.red()), (int) (robot.sensorColor.green()),
                    (int) (robot.sensorColor.blue()), hsvValues);
    
    // STEP 7: begining of sampling logic
     while(opModeIsActive() && (runtime.seconds() <= 2.5)){
         telemetry.addData("Hue", hsvValues[0]);
         telemetry.update();
     }
    
     if (hsvValues[0] < 91){
      
         robot.forward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.36)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.backward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.54)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.forward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
          robot.left();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 1.58)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.right();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         
         
     }else{
      
         robot.backward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.05)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
         
          robot.forward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.01)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
      
          sleep (1000);
      
         //// Move left from mineral sample 1 to mineral sample 2
         robot.left();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.78)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
         //// Reverse move (right) to stop the movement above
         robot.right();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
         
         
          robot.spinLeft();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.05)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
         
         robot.spinRight();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.01)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
         
         robot.forward();
         runtime.reset();
         while(opModeIsActive() && (runtime.seconds() <= 0.03)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
         }
         robot.stop();
                     
        ///////////////////////////////////////////////
        ///// Robot is now at sample mineral 2 //////
        ///////////////////////////////////////////////
        
         sleep (1000);
         
         
          Color.RGBToHSV((int) (robot.sensorColor.red()), (int) (robot.sensorColor.green()),
                    (int) (robot.sensorColor.blue()), hsvValues);
         
         while(opModeIsActive() && (runtime.seconds() <= 2.5)){
         telemetry.addData("Hue", hsvValues[0]);
         telemetry.update();
         }
         
         if (hsvValues[0] < 91){
          
             robot.forward();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.32)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
             robot.backward();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.52)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
             
            
             
             robot.forward();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.02)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
              robot.left();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 1.00)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
             robot.right();
             runtime.reset();
             while(opModeIsActive() && (runtime.seconds() <= 0.02)){
             //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
             }
            
             
         }else{
          
           
      
            ////  Move left from mineral sample 2 to mineral sample 3
            robot.left();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.77)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            }
            robot.stop();
            ////  Reverse move (right) to stop the movement above
            robot.right();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.02)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            }
            robot.stop();
            sleep (500);
            
                        
            ///////////////////////////////////////////////
            ///// Robot is now at sample mineral 3 //////
            ///////////////////////////////////////////////
            
            robot.forward();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.32)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            }
            robot.stop();
             
            robot.backward();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.40)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            } 
            robot.stop();
            
            robot.forward();
            runtime.reset();
            while(opModeIsActive() && (runtime.seconds() <= 0.02)){
            //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
            } 
            robot.stop();
         }
         
     }   
            //////////////////////////////////////////////////////////////////////
            ///////////////////Now at blue box///////////////////////////////////
            /////////////////////////////////////////////////////////////////////

     //// STEP 8: 45ish move to the wall
     robot.left();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 1.36)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop(); 
     ///// 8A: Reverse move (right) to stop the forward movement above
       robot.right();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();  
     
     
     ///// STEP 9: spin to face the depot
     robot.spinLeft();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 1.17)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();  
     STEP 9A: Reverse move (spin right) to stop the forward movement above
     robot.spinRight();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();  
     
     STEP 10: shimmy to push up against a wall
     robot.right();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.28)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();   
     
     
     //STEP 11: move into the depot
     robot.backward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 1.6)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     STEP 11A: Reverse move (forward) to stop the forward movement above
     robot.forward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <= 0.02)){
         //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();  
     
      ////// rotates servo arm to place marker in depot IMPOTANT SLEEP LEAVE IT ALONE!!!!
     robot.marker.setPosition(0);
      sleep (2000);
     
     STEP 12: move forward into crater wall thing bump
     robot.forward();
     runtime.reset();
     while(opModeIsActive() && (runtime.seconds() <=2.24)){
     //telemetry.addData("Detach", "Time: %2.5f S Elapsed", runtime.seconds());
     }
     robot.stop();
     
     
     robot.marker.setPosition(1);
  
     robot.stop();
 
    }
}
