
package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import java.util.Locale;
import android.graphics.Color;

import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;


@TeleOp(name="Mecanum: Tele", group="Tele")
public class TeleOp_Mec extends LinearOpMode {

    /* Declare OpMode members. */
   RoverHardware robot           = new RoverHardware();

    @Override
    public void runOpMode() {

        /* Initialize the hardware variables.
         * The init() method of the hardware class does all the work here
         */
        robot.init(hardwareMap);

        // Send telemetry message to signify robot waiting;
        telemetry.addData("State:", "Ready to Rumble!");    //
        telemetry.update();

        robot.lift.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        telemetry.addData("Initial (closed)",  "Starting at %7d",
                          robot.lift.getCurrentPosition());
        telemetry.update();
        robot.lift.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        robot.fl.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        
        int powerReduction = 1;
        
        // Wait for the game to start (driver presses PLAY)
        waitForStart();

        // run until the end of the match (driver presses STOP)
        while (opModeIsActive()) {
            //////////////////////////// DRIVER 1 ------------------ DRIVER 1 //////////////////////

            if(gamepad1.dpad_up) { // Forwards
                robot.backward();
            }else if(gamepad1.dpad_down){ // Backwards
                robot.forward();
            }else if(gamepad1.dpad_left){ // Strafe Left
                robot.right();
            }else if(gamepad1.dpad_right){ // Strafe Right
                robot.left();
            }else if(gamepad1.dpad_left && gamepad1.dpad_up){ // Diagonal Forward-Left
                robot .forwardLeft();
            }else if(gamepad1.dpad_left && gamepad1.dpad_down){ // Diagonal Back-Left
                robot.backLeft();
            }else if(gamepad1.dpad_right && gamepad1.dpad_up){ //Diagonal Forward-Right
                robot.forwardRight();
            }else if(gamepad1.dpad_right && gamepad1.dpad_down) { //Diagonal Back-Right
                robot.backRight();
            }else if(gamepad1.left_bumper){ //Spin left
                robot.spinLeft(0.5);
            }else if(gamepad1.right_bumper){ //Spin Right
                robot.spinRight(0.5);
            }
            else if(gamepad1.y){ // Stop
                robot.fl.setPower(-gamepad1.left_stick_x/2 + gamepad1.left_stick_y/2 + gamepad1.right_stick_x/2);
                robot.fr.setPower(gamepad1.left_stick_x/2 + gamepad1.left_stick_y/2 - gamepad1.right_stick_x/2);
                robot.bl.setPower(gamepad1.left_stick_x/2 + gamepad1.left_stick_y/2 + gamepad1.right_stick_x/2);
                robot.br.setPower(-gamepad1.left_stick_x/2 + gamepad1.left_stick_y/2 - gamepad1.right_stick_x/2);
            }else{
                robot.fl.setPower(-gamepad1.left_stick_x + gamepad1.left_stick_y + gamepad1.right_stick_x);
                robot.fr.setPower(gamepad1.left_stick_x + gamepad1.left_stick_y - gamepad1.right_stick_x);
                robot.bl.setPower(gamepad1.left_stick_x + gamepad1.left_stick_y + gamepad1.right_stick_x);
                robot.br.setPower(-gamepad1.left_stick_x + gamepad1.left_stick_y - gamepad1.right_stick_x);
            }
             
            //////////////////////////// DRIVER 2 ------------------ DRIVER 2 //////////////////////

        if(gamepad2.b){
            powerReduction = 2;
        }else{
            powerReduction = 1;
        }

        telemetry.addData("Current",  "Total rotation: %7d, Total accurate: %7d",
                          robot.lift.getCurrentPosition()/1440, robot.lift.getCurrentPosition());
        telemetry.update();
        
            // Lift Controls //12/4 changes: Power from 1/-1 to 0.5/-0.5, power from gamepad
            if(gamepad2.dpad_up){ // Lift Up
                robot.lift.setPower(-0.5/powerReduction);
            }else if(gamepad2.dpad_down){ // Lift Down
                robot.lift.setPower(0.5/powerReduction);
            }else{ // Lift Stop
                robot.lift.setPower(0/powerReduction);
            }
            
            //Arm tilt controlls - right joystick y sets power
            robot.armTilt.setPower(gamepad2.right_stick_y/powerReduction);
            
            //Arm extention controlls
            if(gamepad2.left_trigger > 0 && gamepad2.right_trigger == 0){
                robot.armExtend.setPower(gamepad2.left_trigger/powerReduction); //left trigger 0 to 100%
            }else if(gamepad2.left_trigger == 0 && gamepad2.right_trigger > 0){
                robot.armExtend.setPower(-gamepad2.right_trigger/powerReduction); //right trigger 0 to -100%
            }else{
                robot.armExtend.setPower(0/powerReduction);
            }
            
            if(gamepad2.a){
                robot.harvester.setPosition(0);
            }
            
            if(gamepad2.left_stick_y>0.5){
                robot.harvester.setPosition(robot.harvester.getPosition()+0.1);
                telemetry.addData("Current Position: ", robot.harvester.getPosition());
                telemetry.update();
            }else if(gamepad2.left_stick_y<-0.5){
                robot.harvester.setPosition(robot.harvester.getPosition()-0.1);
                telemetry.addData("Current Position: ", robot.harvester.getPosition());
                telemetry.update();
            }else if(gamepad2.left_stick_y<0.5 && gamepad2.left_stick_y>0.01){
                robot.harvester.setPosition(robot.harvester.getPosition()+0.05);
                telemetry.addData("Current Position: ", robot.harvester.getPosition());
                telemetry.update();
            }else if(gamepad2.left_stick_y>-0.5 && gamepad2.left_stick_y<-0.01){
                robot.harvester.setPosition(robot.harvester.getPosition()-0.05);
                telemetry.addData("Current Position: ", robot.harvester.getPosition());
                telemetry.update();
            }

            // //////////////////////////// DRIVER 1 ------------------ DRIVER 2 //////////////////////

            // if(gamepad1.start && gamepad2.start){
            //     robot.flag.setPosition(1);
            // }
            
                    // hsvValues is an array that will hold the hue, saturation, and value information.
        float hsvValues[] = {0F, 0F, 0F};

        // values is a reference to the hsvValues array.
        final float values[] = hsvValues;

        // sometimes it helps to multiply the raw RGB values with a scale factor
        // to amplify/attentuate the measured values.
        final double SCALE_FACTOR = 255;
        
        Color.RGBToHSV((int) (robot.sensorColor.red()),
                    (int) (robot.sensorColor.green()),
                    (int) (robot.sensorColor.blue()),
                    hsvValues);
                    
             // send the info back to driver station using telemetry function.
            telemetry.addData("Alpha", robot.sensorColor.alpha());
            telemetry.addData("Red  ", robot.sensorColor.red());
            telemetry.addData("Green", robot.sensorColor.green());
            telemetry.addData("Blue ", robot.sensorColor.blue());
            telemetry.addData("Hue", hsvValues[0]);

       
        }
    }
}
